# -*- coding: utf-8 -*-
"""Chapter1-phone_churn_eda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MJgRrsZmnZ3wepDlbkl-Qu-TdQ16uOTh
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('churn-bigml-80.csv',na_values=-999)

print(df.columns)

print(df.dtypes)

df["State"].value_counts()
#Return a Series containing counts of unique rows in the DataFrame

df["Churn"].value_counts()

df.nunique()

df.head()

df.tail()

!python --version

from pandas_profiling import ProfileReport
report = ProfileReport(df)
report

!pip install pandas-profiling==2.7.1

!pip3 install pandas_profiling --upgrade

df.shape

from operator import length_hint
#Calculating Mean, Standard Deviation, Median, Max, and Min

#calculate mean account length_hint

df['Account length'].mean()

import numpy as np
print("Mean account length: ", np.round(df['Account length'].mean(), 1))

print("Standard Deviation in account ", np.round(df['Account length'].std()))
print("Median Account length ", np.round(df['Account length'].median(), 1))
print("Max Account length: ", df['Account length'].max())
print("Min Account length: ", df['Account length'].min())

def get_stats_for_col(column_name):
    df_copy = df.copy()
    print(f"Mean {column_name}: ", np.round(df_copy[column_name].mean(), 1))
    print(f"Standard Deviation in {column_name}: ", np.round(df_copy[column_name].std()))
    print(f"Median {column_name}: ", np.round(df_copy[column_name].median(), 1))
    print(f"Max {column_name}: ", df_copy[column_name].max())
    print(f"Min {column_name}: ", df_copy[column_name].min())

import numpy as np
get_stats_for_col('Area code')

df.info()

df[["Total intl minutes"]].describe()

df[["Total day minutes","Total night minutes"]].describe()

df.describe().T

df["Churn"].value_counts()

df["Churn"] = df["Churn"].astype("int64")

df["Churn"].value_counts()

df.groupby("Churn")["Total day minutes"].mean()

def get_groupby_stats(categorical, numerical):
    groupby_df = df[[categorical, numerical]].groupby(categorical).mean().dropna()
    print(groupby_df.head())

get_groupby_stats("Churn","Total day minutes")

columns_to_show = ["Total day minutes", "Total eve minutes", "Total night minutes"]

df.groupby(["Churn"])[columns_to_show].agg(['mean', 'std', 'max', 'min'])

#What is the maximum length of international calls among loyal users (Churn == 0) who do not have an international plan?
df[ (df["Churn"]==0) & (df["International plan"] == "No") ]["Total intl minutes"].max()

pd.crosstab(df["Churn"], df["International plan"])

total_calls = (
    df["Total day calls"]
    + df["Total eve calls"]
    + df["Total night calls"]
    + df["Total intl calls"]
)

df.insert(loc=len(df.columns), column="Total calls", value=total_calls)

df.head()

sns.countplot(df["Total day calls"], palette = "dark")
plt.show()

sns.countplot(df["Total calls"], hue=df["Churn"], palette = "dark")
plt.show()

df.nunique()

sns.countplot(df["Churn"], palette = "dark")
plt.show()

sns.countplot(df["International plan"], palette = "dark")
plt.show()

sns.countplot(df["Area code"],palette = "dark")
plt.title("Count per Area",fontsize=20)
plt.xlabel("Area code",fontsize=15)
plt.ylabel('Count', fontsize=15)
plt.show()

"""# New Section"""

sns.countplot(df["International plan"], hue=df["Churn"], palette = "dark")
plt.show()

d = {"No": 0, "Yes": 1}

df = df.replace({"International plan": d})
df = df.replace({"Voice mail plan": d})

df.head()

average_calls_by_area_code = df[["Area code", "Total calls"]].groupby("Area code").mean()
print(average_calls_by_area_code.head())

df.groupby("Churn")["Total calls"].mean()

sns.countplot(df["Churn"],palette = "dark")
plt.title("Count per Churn",fontsize=20)
plt.xlabel("Churn ",fontsize=15)
plt.ylabel('Count', fontsize=15)
plt.show()

sns.countplot(df["Total day calls"], hue=df["Churn"], palette = "dark")
plt.show()

def get_group_stats(categorical, numerical):
    group_df = df[[categorical, numerical]].groupby(categorical).mean().dropna()
    print(group_df.head())

get_group_stats("Churn", "Total day calls")

"""# New Section"""

pip install pandas-profiling

import pandas as pd
from pandas_profiling import ProfileReport

report = ProfileReport(df)
report

df1=df.loc[0:5, "State":"Area code"]

df1.describe(include='all')

report = ProfileReport(df1)
report